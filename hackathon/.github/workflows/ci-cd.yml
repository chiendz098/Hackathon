name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'

    - name: Install dependencies (Backend)
      working-directory: ./backend
      run: npm ci

    - name: Install dependencies (Frontend)
      working-directory: ./frontend
      run: npm ci

    - name: Install dependencies (Chatbot)
      working-directory: ./chatbot_moi
      run: pip install -r requirements.txt

    - name: Run ESLint
      run: |
        cd frontend && npm run lint
        cd ../backend && npm run lint

    - name: Run backend tests
      working-directory: ./backend
      env:
        NODE_ENV: test
        DB_URI: postgresql://postgres:postgres@localhost:5432/test_db
        JWT_SECRET: test_secret
      run: npm test -- --coverage

    - name: Run frontend tests
      working-directory: ./frontend
      run: npm test -- --coverage

    - name: Run E2E tests
      working-directory: ./frontend
      env:
        CYPRESS_BASE_URL: http://localhost:5173
      run: |
        npm run dev & # Start frontend
        cd ../backend && npm start & # Start backend
        cd ../frontend && npm run cypress:run

    - name: Upload test coverage
      uses: actions/upload-artifact@v3
      with:
        name: coverage
        path: |
          backend/coverage
          frontend/coverage

  build:
    name: Build
    needs: test
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/fptunihub:latest
          ${{ secrets.DOCKER_USERNAME }}/fptunihub:${{ github.sha }}
        cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/fptunihub:buildcache
        cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/fptunihub:buildcache,mode=max

  deploy:
    name: Deploy
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Deploy to production
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          # Pull latest image
          docker pull ${{ secrets.DOCKER_USERNAME }}/fptunihub:latest

          # Stop and remove old container
          docker stop fptunihub || true
          docker rm fptunihub || true

          # Start new container
          docker run -d \
            --name fptunihub \
            --restart unless-stopped \
            -p 5000:5000 \
            -p 8002:8002 \
            -e NODE_ENV=production \
            -e DB_URI=${{ secrets.DB_URI }} \
            -e JWT_SECRET=${{ secrets.JWT_SECRET }} \
            -e GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }} \
            -e GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }} \
            -e OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }} \
            -v /var/log/fptunihub:/app/logs \
            -v /var/fptunihub/uploads:/app/uploads \
            ${{ secrets.DOCKER_USERNAME }}/fptunihub:latest

          # Clean up old images
          docker image prune -f

    - name: Notify deployment
      uses: slackapi/slack-github-action@v1.24.0
      with:
        channel-id: 'deployments'
        slack-message: 'Application deployed successfully! :rocket:'
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }} 